/**
 * Version simplifi√©e de l'application pour identifier le probl√®me
 */

// Chargement des variables d'environnement
require('dotenv').config()

const express = require('express')
const app = express()
const port = process.env.PORT || 3000

console.log('D√©marrage de l\'application...')

// Middlewares de base
app.use(express.json())

console.log('Middlewares configur√©s...')

// Route de test simple
app.get('/', (req, res) => {
  console.log('Route / appel√©e')
  res.json({
    message: 'API NutriScan - Version simplifi√©e',
    status: 'OK',
    timestamp: new Date().toISOString()
  })
})

console.log('Routes configur√©es...')

// Gestionnaires d'erreur
process.on('unhandledRejection', (reason, promise) => {
  console.error('Promesse rejet√©e non g√©r√©e:', reason)
})

process.on('uncaughtException', (error) => {
  console.error('Exception non g√©r√©e:', error)
  process.exit(1)
})

console.log('Gestionnaires d\'erreur configur√©s...')

// D√©marrage du serveur
const server = app.listen(port, () => {
  console.log(`‚úÖ Serveur d√©marr√© sur le port ${port}`)
  console.log(`üîó URL: http://localhost:${port}`)
  console.log('Le serveur est en cours d\'ex√©cution...')
})

// Emp√™cher la fermeture automatique
setInterval(() => {
  console.log('Serveur toujours actif...', new Date().toISOString())
}, 30000)

console.log('Configuration termin√©e, serveur en attente...')